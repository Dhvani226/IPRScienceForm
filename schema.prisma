// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CompetitionSelection {
  id                Int      @id @default(autoincrement())
  competitionName   String
  schoolId          Int
  School            School   @relation(fields: [schoolId], references: [id])
  selectedAt        DateTime @default(now())
}

model School {
  id                    Int      @id @default(autoincrement())
  userId                String   @unique
  password              String
  schoolName            String
  email                 String   @unique
  address               String
  cityVillage           String
  pincode               String
  affiliationNumber     String
  CoordinatorTeacher    Teacher? @relation("CoordinatorTeacher", fields: [CoordinatorTeacherid], references: [id])
CoordinatorTeacherid Int?
  AccompanyingTeacher   Teacher? @relation("AccompanyingTeacher", fields: [AccompanyingTeacherid], references: [id])
AccompanyingTeacherid Int?

  competitionSelections  CompetitionSelection[]
  studentModel1         StudentModel1[]
  studentModel2         StudentModel2[]
  quiz                  Quiz[]
  eloquenceEnglish      EloquenceEnglish[]
  essayEnglish          EssayEnglish[]
  poster                PosterCompetition[]
  skit                  SkitCompetition[]
  teacherModel          TeacherModelCompetition[]

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  teachers              Teacher[] @relation("SchoolTeachers")

  Teacher Teacher[]
}

model Teacher {
  id                    Int      @id @default(autoincrement())
  name                  String
  mobile                String
  gender                String
  requiresAccommodation Boolean
  schoolId             Int
  school                School   @relation(fields: [schoolId], references: [id]) // This establishes the school relation

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  coordinatorSchools    School[] @relation("CoordinatorTeacher")
  accompanyingSchools   School[] @relation("AccompanyingTeacher")

  School School[] @relation("SchoolTeachers")
}

model StudentModel1 {
  id                          Int      @id @default(autoincrement())
  competitionName             String   @default("Student's Model-1")
  participant1Name            String
  participant1Gender          String
  participant1Class           String
  participant1Accommodation    String
  participant2Name            String
  participant2Gender          String
  participant2Class           String
  participant2Accommodation    String
  additionalRequirements      String?
  declaration                 Boolean
  writeup                     String   // Path to the uploaded file
  schoolId                    Int
  School                      School   @relation(fields: [schoolId], references: [id])

  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}

model StudentModel2 {
  id                          Int      @id @default(autoincrement())
  participant1Name            String
  participant1Gender          String
  participant1Class           String
  participant1Accommodation    String
  participant2Name            String?
  participant2Gender          String?
  participant2Class           String?
  participant2Accommodation    String?
  additionalRequirements       String?
  declaration                  Boolean
  writeup                     String   // Path to uploaded file
  schoolId                     Int
  School                       School   @relation(fields: [schoolId], references: [id])

  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
}

model Quiz {
  id                         Int      @id @default(autoincrement())
  participant1Name            String
  participant1Gender          String
  participant1Class           String
  participant1Accommodation    String
  participant2Name            String?  // Optional
  participant2Gender          String?  // Optional
  participant2Class           String?  // Optional
  participant2Accommodation    String?  // Optional
  declaration                 Boolean
  schoolId                    Int
  School                      School   @relation(fields: [schoolId], references: [id])

  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}

model EloquenceEnglish {
  id                         Int      @id @default(autoincrement())
  participantName            String
  participantGender          String
  participantClass           String
  accommodationRequired      String
  declaration                Boolean
  schoolId                   Int
  School                     School   @relation(fields: [schoolId], references: [id])

  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
}

model EssayEnglish {
  id                           Int      @id @default(autoincrement())
  participantName              String
  participantGender            String
  participantClass             String
  accommodationRequired        String
  essayFileUrl                 String   @map("essay_file_url") // URL or path to the uploaded PDF
  declaration                  Boolean
  schoolId                     Int
  School                       School   @relation(fields: [schoolId], references: [id])

  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
}

model PosterCompetition {
  id                            Int      @id @default(autoincrement())
  participant1Name              String
  participant1Gender            String
  participant1Class             String
  participant1Accommodation      String
  participant1Declaration        Boolean
  participant2Name              String?   // Optional participant
  participant2Gender            String?
  participant2Class             String?
  participant2Accommodation      String?
  participant2Declaration        Boolean?

  schoolId                      Int
  School                        School   @relation(fields: [schoolId], references: [id])

  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
}

model SkitCompetition {
  id                            Int      @id @default(autoincrement())
  participant1Name              String
  participant1Gender            String
  participant1Class             String
  participant1Accommodation      String
  participant2Name              String?
  participant2Gender            String?
  participant2Class             String?
  participant2Accommodation      String?
  participant3Name              String?
  participant3Gender            String?
  participant3Class             String?
  participant3Accommodation      String?
  participant4Name              String?
  participant4Gender            String?
  participant4Class             String?
  participant4Accommodation      String?
  participant5Name              String?
  participant5Gender            String?
  participant5Class             String?
  participant5Accommodation      String?
  participant6Name              String?
  participant6Gender            String?
  participant6Class             String?
  participant6Accommodation      String?
  additionalRequirements         String?
  declaration                   Boolean

  schoolId                      Int
  School                        School   @relation(fields: [schoolId], references: [id])

  videoLink                    String

  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @default(now())
}

model TeacherModelCompetition {
  id                            Int      @id @default(autoincrement())
  teacherName                   String
  teacherGender                 String
  accommodationRequired          String
  additionalRequirements         String?
  declaration                   Boolean
  writeup                       String   // URL or path to the uploaded PDF writeup

  schoolId                      Int
  School                        School   @relation(fields: [schoolId], references: [id])

  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @default(now())
}
